name: Create PR
description: Creates a new PR and adds reviewers

inputs:
  title:
    description: PR title
    required: false
    default: New version
  reviewers:
    description: List of user ids to add as reviewers
    type: string
    required: false
  increment:
    description: Increment version (patch, minor, or major)
    type: string
    required: false
    default: patch

runs:
  using: composite
  env:
    INPUTS_TITLE: ${{ inputs.title }}
    INPUTS_REVIEWERS: ${{ inputs.reviewers }}
    INPUTS_INCREMENT: ${{ inputs.increment }}
  steps:
    - name: Increment version
      shell: bash
      run: |
        npm version $INPUTS_INCREMENT --no-git-tag-version
        echo "NEW_VERSION=$(npm pkg get version | tr -d '"')" >> $GITHUB_ENV
        echo "PR_BRANCH=pr-$NEW_VERSION" >> $GITHUB_ENV

    - name: Create pr branch
      shell: bash
      run: |
        git checkout -B $PR_BRANCH

    - name: Add entry to CHANGELOG.md
      uses: actions/github-script@v7
      with:
        script: |
          const fsp = require('node:fs/promises');
          const mdFile = 'CHANGELOG.md';
          const newVersion = process.env.NEW_VERSION;

          try {
            const mdContent = await fsp.readFile(mdFile, 'utf8');
            const match = mdContent.match(/^(#+.*)(\d+\.\d+\.\d+).*$/im);
            if (match?.[0]) {
              const nextRelease = match[0].replace(/\d+\.\d+\.\d+/, newVersion);
              const currentRelease = match[0].replace(/tbd/i, currentDate);

              mdContent = mdContent.replace(/^#+.*\d+\.\d+\.\d+.*tbd.*$/im, `${nextRelease}\n\n${currentRelease}`);
              await fsp.writeFile(mdFile, mdContent);
            }
          } catch(err) {
            core.warning('Error during CHANGELOG.md modification: ' + err.message);
          }

    - name: Commit and push
      shell: bash
      run: |
        git add -u .
        git commit -m "${INPUTS_TITLE}"
        git push origin $PR_BRANCH

    - name: Create PR and add reviewers
      uses: actions/github-script@v7
      with:
        script: |
          const [ owner, repo ] = process.env.GITHUB_REPOSITORY.split('/');
          const { data: pullRequest } = await github.rest.pulls.create({
            owner,
            repo,
            title: process.env.INPUTS_TITLE,
            head:  process.env.PR_BRANCH,
            base:  process.env.GITHUB_REF,
            body: `Set version to ${process.env.NEW_VERSION}`,
          });

          core.info(`PR: ${pullRequest.html_url}`);
          await core.summary
            .addLink(pullRequest.html_url, pullRequest.html_url)
            .write();

          if (process.env.INPUTS_REVIEWERS) {
            const reviewers = process.env.INPUTS_REVIEWERS.split(/[\n,\s]+/);
            await github.rest.pulls.requestReviewers({
              owner,
              repo,
              pull_number: pullRequest.number,
              reviewers
            });
          }
