# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Release

on:
  workflow_dispatch:
    inputs:
      increment:
        description: Increment version before release
        required: true
        default: patch
        type: choice
        options:
          - patch
          - minor
          - major
          - none

      post-increment:
        description: Increment version after release
        required: true
        default: none
        type: choice
        options:
          - patch
          - minor
          - major
          - none

      dry-run:
        description: Dry run
        required: false
        default: false
        type: boolean

permissions:
  contents: write

env:
  INPUTS_DRY_RUN: ${{ github.event.inputs.dry-run }}
  INPUTS_INCREMENT: ${{ github.event.inputs.increment }}
  INPUTS_POST_INCREMENT: ${{ github.event.inputs.post-increment }}
  DRY_RUN_OPTION: ${{ github.event.inputs.dry-run == 'true' && '--dry-run' || '' }}


jobs:
  publish-npm:
    runs-on: ubuntu-latest
    environment: npm
    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-node@v4
      with:
        node-version: 22
        registry-url: https://registry.npmjs.org/

    - name: Run Unit Tests
      if: ${{ github.event.inputs.dry-run == 'false' }}
      run: |
        npm ci
        npm run test

    ## - name: Run Integration Tests
    ##  run: |
    ##    npm install
    ##    npm run test:integration

    # requires npm which we get from setup-node
    - name: Increment version
      if: ${{ github.event.inputs.increment != 'none' }}
      run: |
        npm version $INPUTS_INCREMENT --no-git-tag-version

    - name: get version
      id: get-version
      run: |
        echo "new-version=$(npm pkg get version | tr -d '"')" >> $GITHUB_OUTPUT

    # replace placeholder with current values in CHANGELOG.md
    - name: Replace TBD entry in CHANGELOG.md
      uses: actions/github-script@v7
      env:
        NEW_VERSION: ${{ steps.get-version.outputs.new-version }}
      with:
        script: |
          const fsp = require('node:fs/promises');
          const mdFile = 'CHANGELOG.md';

          const newVersion = process.env.NEW_VERSION;
          const currentDate = new Date().toISOString().replace(/T.*/i, '');

          const mdContent = await fsp.readFile(mdFile, 'utf8');
          const regex = /^##\s+\[Unreleased\]\s*$/im;
          const newContent = mdContent.replace(regex, `## [${newVersion}] - ${currentDate}`);

          if (mdContent !== newContent) {
            await fsp.writeFile(mdFile, newContent);
            if (process.env.INPUTS_DRY_RUN === 'true') {
              core.info(newContent);
            }
          } else {
            throw 'Pattern not found in CHANGELOG.md. Manually validate changelog.';
          }

    - name: Publish to npm
      run: npm publish --access public $DRY_RUN_OPTION
      env:
        NODE_AUTH_TOKEN: ${{secrets.npm_token}}

    - name: Parse changelog
      id: parse-changelog
      uses: schwma/parse-changelog-action@v1.0.0
      with:
        version: '${{ steps.get-version.outputs.new-version }}'

    - name: Create a GitHub release
      if: ${{ github.event.inputs.dry-run == 'false' }}
      uses: ncipollo/release-action@v1
      with:
        tag: 'v${{ steps.get-version.outputs.new-version }}'
        body: '${{ steps.parse-changelog.outputs.body }}'

    # add missing template to change log for new development
    - name: Add version template to CHANGELOG.md
      uses: actions/github-script@v7
      with:
        script: |
          const fsp = require('node:fs/promises');
          const mdFile = 'CHANGELOG.md';

          const mdContent = await fsp.readFile(mdFile, 'utf8');
          const regex = /^##\s+.*$/m;
          const newContent = mdContent.replace(regex, `## [Unreleased]

          ### Added
          ### Changed
          ### Deprecated
          ### Removed
          ### Fixed
          ### Security

          $&
          `);

          if (mdContent !== newContent) {
            await fsp.writeFile(mdFile, newContent);
            if (process.env.INPUTS_DRY_RUN === 'true') {
              core.info(newContent);
            }
          } else {
            throw 'Valid first entry not found in CHANGELOG.md. Manually validate changelog.';
          }

    # increment version for next development
    - name: Post increment version
      if: ${{ github.event.inputs.post-increment != 'none' }}
      run: |
        npm version $INPUTS_POST_INCREMENT --no-git-tag-version

    # commit and push branch
    - name: Commit changes
      env:
        NEW_VERSION: ${{ steps.get-version.outputs.new-version }}
      run: |
        git config --global user.name "${GITHUB_ACTOR}"
        git config --global user.email "noreply+ms@github.com"

        git add -u .
        git commit -m "chore(version): $INPUTS_INCREMENT version $NEW_VERSION"
        git push origin $BRANCH $DRY_RUN_OPTION
