# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Release

on:
  workflow_dispatch:
    inputs:
      dry-run:
        description: Dry run
        required: false
        default: false
        type: boolean
      increment:
        description: Increment version
        required: true
        default: patch
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write

env:
  INPUTS_INCREMENT: ${{ github.event.inputs.increment }}

jobs:
  publish-npm:
    runs-on: ubuntu-latest
    # environment: npm
    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-node@v4
      with:
        node-version: 22
        registry-url: https://registry.npmjs.org/

    - name: Run Unit Tests
      run: |
        npm ci
        npm run test

    ## - name: Run Integration Tests
    ##  run: |
    ##    npm install
    ##    npm run test:integration

    # requires npm which we get from setup-node
    - name: Increment version
      id: increment-version
      run: |
        npm version $INPUTS_INCREMENT --no-git-tag-version
        echo "new-version=$(npm pkg get version | tr -d '"')" >> $GITHUB_OUTPUT

    # replace placeholders with current values in CHANGELOG.md
    - name: Replace TBD entry in CHANGELOG.md
      uses: actions/github-script@v7
      env:
        NEW_VERSION: ${{ steps.increment-version.outputs.new-version }}
      with:
        script: |
          const fsp = require('node:fs/promises');
          const mdFile = 'CHANGELOG.md';

          const newVersion = process.env.NEW_VERSION;
          const currentDate = new Date().toISOString().replace(/T.*/i, '');

          try {
            const mdContent = await fsp.readFile(mdFile, 'utf8');
            const regex = /^(.*)(\$NEXT_VERSION)(.*)(\$NEXT_DATE)(.*)$/im;
            const newContent = mdContent.replace(regex, `$1${newVersion}$3${currentDate}$5`);

            if (mdContent !== newContent) {
              await fsp.writeFile(mdFile, newContent);
              core.debug(newContent);
            }
          } catch(err) {
            core.warning('Error during CHANGELOG.md modification: ' + err.message);
          }

    - name: Publish to npm
      if: ${{ github.event.inputs.dry-run == 'false' }}
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{secrets.npm_token}}

    - name: Parse changelog
      id: parse-changelog
      uses: schwma/parse-changelog-action@v1.0.0
      with:
        version: '${{ steps.increment-version.outputs.new-version }}'

    - name: Create a GitHub release
      if: ${{ github.event.inputs.dry-run == 'false' }}
      uses: ncipollo/release-action@v1
      with:
        tag: 'v${{ steps.increment-version.outputs.new-version }}'
        body: '${{ steps.parse-changelog.outputs.body }}'

    # add missing template to change log for new development
    - name: Add version template to CHANGELOG.md
      uses: actions/github-script@v7
      with:
        script: |
          const fsp = require('node:fs/promises');
          const mdFile = 'CHANGELOG.md';

          try {
            const mdContent = await fsp.readFile(mdFile, 'utf8');
            const regex = /^(.*)(\d+\.\d+\.\d+)(.*)(\d{4}-\d{2}-\d{2})(.*)$/im;
            const newContent = mdContent.replace(regex, `$1$NEXT_VERSION$3$NEXT_DATE$5\n\n$&`);

            if (mdContent !== newContent) {
              await fsp.writeFile(mdFile, newContent);
              core.debug(newContent);
            }
          } catch(err) {
            core.warning('Error during CHANGELOG.md modification: ' + err.message);
          }

    # prepare branch
    - name: Commit changes
      env:
        NEW_VERSION: ${{ steps.increment-version.outputs.new-version }}
      run: |
        git config --global user.name "${GITHUB_ACTOR}"
        git config --global user.email "noreply+ms@github.com"

        git add -u .
        git commit -m "chore(version): $INPUTS_INCREMENT version $NEW_VERSION"
        git log -4 --oneline --pretty=format:'%C(yellow)%h%Creset -%C(cyan)%d%Creset %s   %Cgreen%cr  %C(yellow)%an%Creset' --abbrev-commit --date=relative

    # push changes to the repository
    - name: Push to repository
      if: ${{ github.event.inputs.dry-run == 'false' }}
      env:
        BRANCH: ${{ github.ref || github.head_ref}}
      run: |
        git push origin $BRANCH
