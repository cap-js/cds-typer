# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Release

on:
  workflow_dispatch:
    inputs:
      dry-run:
        description: Dry run
        required: false
        default: false
        type: boolean
      increment:
        description: Increment version
        required: true
        default: patch
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write

env:
  INPUTS_DRY_RUN: ${{ github.event.inputs.dry-run }}
  INPUTS_INCREMENT: ${{ github.event.inputs.increment }}
  DRY_RUN_OPTION: ${{ github.event.inputs.dry-run == 'true' && '--dry-run' || '' }}
  CHANGELOG_FILE: CHANGELOG.md


jobs:
  publish-npm:
    runs-on: ubuntu-latest
    environment: npm
    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-node@v4
      with:
        node-version: 22
        registry-url: https://registry.npmjs.org/

    - name: Run Unit Tests
      if: ${{ github.event.inputs.dry-run == 'false' }}
      run: |
        npm ci
        npm run test

    ## - name: Run Integration Tests
    ##  run: |
    ##    npm install
    ##    npm run test:integration

    # requires npm which we get from setup-node
    - name: Increment version
      id: increment-version
      run: |
        npm version $INPUTS_INCREMENT --no-git-tag-version
        echo "new-version=$(npm pkg get version | tr -d '"')" >> $GITHUB_OUTPUT

    # replace placeholder with current values in CHANGELOG.md
    # -E extended mode for \s support, -i inplace
    # 0,: only operate on the first match.
    - name: Replace TBD entry in ${{ env.CHANGELOG_FILE }}
      env:
        NEW_VERSION: ${{ steps.increment-version.outputs.new-version }}
      run: |
        CURRENT_DATE=$(date +%Y-%m-%d)
        sed -i -E "0,/^##\s+\[Unreleased\].*$/s//## [${NEW_VERSION}] - ${CURRENT_DATE}/" $CHANGELOG_FILE
        cat $CHANGELOG_FILE | head -n 20

    - name: Publish to npm
      run: npm publish --access public $DRY_RUN_OPTION
      env:
        NODE_AUTH_TOKEN: ${{secrets.npm_token}}

    - name: Parse ${{ env.CHANGELOG_FILE }}
      id: parse-changelog
      uses: schwma/parse-changelog-action@v1.0.0
      with:
        version: '${{ steps.increment-version.outputs.new-version }}'

    - name: Create a GitHub release
      if: ${{ github.event.inputs.dry-run == 'false' }}
      uses: ncipollo/release-action@v1
      with:
        tag: 'v${{ steps.increment-version.outputs.new-version }}'
        body: '${{ steps.parse-changelog.outputs.body }}'

    # add missing template to change log for new development
    # -E extended mode for \s support, -i inplace
    # 0,: only operate on the first match.
    # & is the matched string
    - name: Add version template to ${{ env.CHANGELOG_FILE }}
      run: |
        sed -i -E '0,/^##\s+.*$/s//## [Unreleased]\
        \
        ### Added\
        ### Changed\
        ### Deprecated\
        ### Removed\
        ### Fixed\
        ### Security\
        \
        &/' $CHANGELOG_FILE
        cat $CHANGELOG_FILE | head -n 30

    # prepare branch
    - name: Commit changes
      id: commit-changes
      env:
        NEW_VERSION: ${{ steps.increment-version.outputs.new-version }}
        NEW_BRANCH: chore/release-${{ steps.increment-version.outputs.new-version }}
      run: |
        git config --global user.name "${GITHUB_ACTOR}"
        git config --global user.email "noreply+ms@github.com"

        NEW_BRANCH="chore/release-$NEW_VERSION"
        NEW_TITLE="chore(version): $INPUTS_INCREMENT version $NEW_VERSION"

        git checkout -B $NEW_BRANCH
        git add -u .
        git commit -m $NEW_TITLE
        git push origin $NEW_BRANCH $DRY_RUN_OPTION

        echo "new-branch=$NEW_BRANCH" >> $GITHUB_OUTPUT
        echo "new-title=$NEW_TITLE" >> $GITHUB_OUTPUT

    - name: Create PR w/ reviewers
      uses: actions/github-script@v7
      # if: ${{ github.event.inputs.dry-run == 'false' }}
      env:
        PR_TITLE: ${{ steps.commit-changes.outputs.new-title }}
        PR_NAME: ${{ steps.commit-changes.outputs.new-branch }}
        BASE_BRANCH: ${{ github.ref }}
        NEW_VERSION: ${{ steps.increment-version.outputs.new-version }}
        REVIEWERS: ${{ github.actor}}
      with:
        script: |
          const [ owner, repo ] = process.env.GITHUB_REPOSITORY.split('/');
          const { data: pullRequest } = await github.rest.pulls.create({
            owner,
            repo,
            title: process.env.PR_TITLE,
            head:  process.env.PR_NAME,
            base:  process.env.BASE_BRANCH,
            body: `Set version to ${process.env.NEW_VERSION}`,
          });

          core.info(`PR: ${pullRequest.html_url}`);
          await core.summary
            .addLink(pullRequest.html_url, pullRequest.html_url)
            .write();

          if (process.env.REVIEWERS) {
            const reviewers = process.env.REVIEWERS.split(/[\n,\s]+/);
            await github.rest.pulls.requestReviewers({
              owner,
              repo,
              pull_number: pullRequest.number,
              reviewers
            });
          }
