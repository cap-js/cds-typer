{
  "name": "@cap-js/cds-typer",
  "version": "0.35.0",
  "description": "Generates .ts files for a CDS model to receive code completion in VS Code",
  "main": "index.js",
  "repository": "github:cap-js/cds-typer",
  "homepage": "https://cap.cloud.sap/",
  "keywords": [
    "CAP",
    "CDS",
    "CLI"
  ],
  "author": "SAP SE (https://www.sap.com)",
  "license": "Apache-2.0",
  "scripts": {
    "test:unit": "node test/testRunner.js ./test/unit ./test/unit/setup.mjs",
    "test:integration": "node test/testRunner.js ./test/integration ./test/integration/setup.mjs",
    "test:smoke": "node test/testRunner.js ./test/smoke ./test/smoke/setup.mjs",
    "test:all": "npm run test:smoke && npm run test:unit && npm run test:integration",
    "test": "npm run test:all",
    "lint": "npx eslint .",
    "lint:fix": "npx eslint . --fix",
    "cli": "node lib/cli.js",
    "doc:clean": "rm -rf ./doc",
    "doc:prepare": "npm run doc:clean && mkdir -p doc/types",
    "doc:typegen": "./node_modules/.bin/tsc ./lib/*.js  --skipLibCheck --declaration --allowJs --emitDeclarationOnly --outDir doc/types && cd doc/types && tsc --init",
    "doc:cli": "npm run cli -- --help > ./doc/cli.txt",
    "jsdoc:check": "tsc --noEmit --project jsconfig.json",
    "write:cds-typer-shema": "node scripts/write-cds-typer-schema.js"
  },
  "files": [
    "lib/",
    "library",
    "index.js",
    "README.md",
    "cds-plugin.js"
  ],
  "types": "index.d.ts",
  "bin": {
    "cds-typer": "./lib/cli.js"
  },
  "peerDependencies": {
    "@cap-js/cds-types": ">=0.9",
    "@sap/cds": ">=8"
  },
  "devDependencies": {
    "@cap-js/cds-types": "^0",
    "@stylistic/eslint-plugin-js": "^4.2.0",
    "acorn": "^8.10.0",
    "eslint": "^9",
    "eslint-plugin-jsdoc": "^51.2.1",
    "typescript": ">=4.6.4"
  },
  "cds": {
    "typer": {
      "output_directory": "@cds-models",
      "inline_declarations": "flat",
      "target_module_type": "auto",
      "properties_optional": true,
      "use_entities_proxy": true,
      "build_task": true
    },
    "schema": {
      "buildTaskType": {
        "name": "typescript",
        "description": "TypeScript build plugin. For use after the nodejs build task."
      },
      "cds": {
        "typer": {
          "type": "object",
          "description": "Configuration for CDS Typer",
          "properties": {
            "cache": {
              "type": "string",
              "description": "How to cache typer runs.\nnone: fully run cds-typer whenever it is called\nblake2s256: only run if the blake2s256-hash of the model has changed. Hash is stored in a file between runs.",
              "enum": [
                "none",
                "blake2s256"
              ],
              "default": "none"
            },
            "output_directory": {
              "type": "string",
              "description": "Root directory to write the generated files to.",
              "default": "@cds-models"
            },
            "log_level": {
              "type": "string",
              "description": "Minimum log level that is printed.\nThe default is only used if no explicit value is passed\nand there is no configuration passed via cds.env either.",
              "enum": [
                "SILENT",
                "ERROR",
                "WARN",
                "INFO",
                "DEBUG",
                "TRACE",
                "SILLY",
                "VERBOSE",
                "WARNING",
                "CRITICAL",
                "NONE"
              ],
              "default": "ERROR"
            },
            "js_config_path": {
              "type": "string",
              "description": "Path to where the jsconfig.json should be written.\nIf specified, cds-typer will create a jsconfig.json file and\nset it up to restrict property usage in types entities to\nexisting properties only."
            },
            "use_entities_proxy": {
              "type": "boolean",
              "description": "If set to true the 'cds.entities' exports in the generated 'index.js'\nfiles will be wrapped in 'Proxy' objects\nso static import/require calls can be used everywhere.\n\nWARNING: entity properties can still only be accessed after\n'cds.entities' has been loaded",
              "default": true
            },
            "inline_declarations": {
              "type": "string",
              "description": "Whether to resolve inline type declarations\nflat: (x_a, x_b, ...)\nor structured: (x: {a, b}).",
              "enum": [
                "flat",
                "structured"
              ],
              "default": "flat"
            },
            "properties_optional": {
              "type": "boolean",
              "description": "If set to true, properties in entities are\nalways generated as optional (a?: T).\nSetting it to false makes properties non-optional instead (a: T).",
              "default": true
            },
            "ieee754compatible": {
              "type": "boolean",
              "description": "If set to true, floating point properties are generated\nas IEEE754 compatible '(number | string)' instead of 'number'.",
              "default": false
            },
            "legacy_binary_types": {
              "type": "boolean",
              "description": "If set to true, Binary and LargeBinary are generated\nas strings.",
              "default": false
            },
            "target_module_type": {
              "type": "string",
              "description": "Output format for generated .js files.\nSetting it to auto tries to derive the module type from\nthe package.json and falls back to CJS.",
              "enum": [
                "esm",
                "cjs",
                "auto"
              ],
              "default": "auto"
            },
            "build_task": {
              "type": "boolean",
              "description": "If set to true, the typescript build task will not be registered/ executed.\nThis value must be set in your project configuration.\nPassing it as parameter to the cds-typer CLI has no effect.",
              "default": true
            }
          }
        }
      }
    }
  }
}
