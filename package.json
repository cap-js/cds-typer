{
  "name": "@cap-js/cds-typer",
  "version": "0.27.0",
  "description": "Generates .ts files for a CDS model to receive code completion in VS Code",
  "main": "index.js",
  "repository": "github:cap-js/cds-typer",
  "homepage": "https://cap.cloud.sap/",
  "keywords": [
    "CAP",
    "CDS",
    "CLI"
  ],
  "author": "SAP SE (https://www.sap.com)",
  "license": "SEE LICENSE IN LICENSE",
  "scripts": {
    "test:unit": "jest --projects test/unit.jest.config.js",
    "test:integration": "jest --projects test/int.jest.config.js",
    "test:smoke": "jest --projects test/smoke.jest.config.js",
    "test:all": "jest",
    "test": "npm run test:smoke && npm run test:unit",
    "lint": "npx eslint .",
    "lint:fix": "npx eslint . --fix",
    "cli": "node lib/cli.js",
    "doc:clean": "rm -rf ./doc",
    "doc:prepare": "npm run doc:clean && mkdir -p doc/types",
    "doc:typegen": "./node_modules/.bin/tsc ./lib/*.js  --skipLibCheck --declaration --allowJs --emitDeclarationOnly --outDir doc/types && cd doc/types && tsc --init",
    "doc:cli": "npm run cli -- --help > ./doc/cli.txt",
    "jsdoc:check": "tsc --noEmit --project jsconfig.json"
  },
  "files": [
    "lib/",
    "library",
    "CHANGELOG.md",
    "index.js",
    "LICENSE",
    "README.md",
    "cds-plugin.js"
  ],
  "types": "index.d.ts",
  "bin": {
    "cds-typer": "./lib/cli.js"
  },
  "peerDependencies": {
    "@cap-js/cds-types": ">=0.6.4",
    "@sap/cds": ">=8"
  },
  "devDependencies": {
    "@cap-js/cds-types": "^0",
    "@sap/cds": "^8",
    "@stylistic/eslint-plugin-js": "^2.7.2",
    "acorn": "^8.10.0",
    "eslint": "^9",
    "eslint-plugin-jsdoc": "^50.2.2",
    "globals": "^15.0.0",
    "jest": "^29",
    "typescript": ">=4.6.4"
  },
  "jest": {
    "projects": [
      "test/smoke.jest.config.js",
      "test/unit.jest.config.js"
    ]
  },
  "cds": {
    "schema": {
      "cds": {
        "typer": {
          "type": "object",
          "description": "Configuration for CDS Typer",
          "properties": {
            "inlineDeclarations": {
              "type": "string",
              "description": "Whether to resolve inline type declarations flat: (x_a, x_b, ...) or structured: (x: {a, b})",
              "enum": [
                "flat",
                "structured"
              ],
              "default": "structured"
            },
            "IEEE754Compatible": {
              "type": "boolean",
              "description": "If set to true, floating point properties are generated as IEEE754 compatible '(number | string)' instead of 'number'",
              "default": false
            },
            "jsConfigPath": {
              "type": "string",
              "description": "Path to where the jsconfig.json should be written.\nIf specified, cds-typer will create a jsconfig.json file and set it up to restrict property usage in types entities to existing properties only"
            },
            "logLevel": {
              "type": "string",
              "description": "Minimum log level that is printed.\nThe default is only used if no explicit value is passed and there is no configuration passed via cds.env either",
              "enum": [
                "SILENT",
                "ERROR",
                "WARN",
                "INFO",
                "DEBUG",
                "TRACE",
                "SILLY",
                "VERBOSE"
              ],
              "default": "ERROR"
            },
            "outputDirectory": {
              "type": "string",
              "description": "Root directory to write the generated files to",
              "default": "@cds-models"
            },
            "propertiesOptional": {
              "type": "boolean",
              "description": "If set to true, properties in entities are always generated as optional (a?: T)",
              "default": true
            },
            "useEntitiesProxy": {
              "type": "boolean",
              "description": "If set to true the 'cds.entities' exports in the generated 'index.js' files will be wrapped in 'Proxy' objects so static import/require calls can be used everywhere.\n\nWARNING: entity properties can still only be accessed after 'cds.entities' has been loaded",
              "default": false
            }
          }
        }
      }
    }
  }
}
